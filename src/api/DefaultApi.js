/**
 * Earthpoints API
 * Earthpoints API description
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientCredentialsDto from '../model/ClientCredentialsDto';
import ClientCredentialsResponseDto from '../model/ClientCredentialsResponseDto';
import CreatePlatformConnectionDto from '../model/CreatePlatformConnectionDto';
import CreatePointEventDto from '../model/CreatePointEventDto';
import CreatePointEventResponseDto from '../model/CreatePointEventResponseDto';
import CreateUserDto from '../model/CreateUserDto';
import UpdatePointEventDto from '../model/UpdatePointEventDto';
import User from '../model/User';
import UserFromExternalPlatformDataDto from '../model/UserFromExternalPlatformDataDto';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appControllerCreate operation.
     * @callback module:api/DefaultApi~appControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePointEventResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreatePointEventDto} createPointEventDto 
     * @param {module:api/DefaultApi~appControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePointEventResponseDto}
     */
    appControllerCreate(createPointEventDto, callback) {
      let postBody = createPointEventDto;
      // verify the required parameter 'createPointEventDto' is set
      if (createPointEventDto === undefined || createPointEventDto === null) {
        throw new Error("Missing the required parameter 'createPointEventDto' when calling appControllerCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePointEventResponseDto;
      return this.apiClient.callApi(
        '/point-event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerDashboard operation.
     * @callback module:api/DefaultApi~appControllerDashboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerDashboard(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerFacebookConnect operation.
     * @callback module:api/DefaultApi~appControllerFacebookConnectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerFacebookConnectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerFacebookConnect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/connect/facebook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerFacebookConnectRedirect operation.
     * @callback module:api/DefaultApi~appControllerFacebookConnectRedirectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerFacebookConnectRedirectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerFacebookConnectRedirect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/callback/facebook/connect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerFacebookLogin operation.
     * @callback module:api/DefaultApi~appControllerFacebookLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerFacebookLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerFacebookLogin(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/login/facebook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerFacebookLoginRedirect operation.
     * @callback module:api/DefaultApi~appControllerFacebookLoginRedirectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerFacebookLoginRedirectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerFacebookLoginRedirect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/callback/facebook/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerInstagramConnect operation.
     * @callback module:api/DefaultApi~appControllerInstagramConnectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerInstagramConnectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerInstagramConnect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/connect/instagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerInstagramConnectRedirect operation.
     * @callback module:api/DefaultApi~appControllerInstagramConnectRedirectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerInstagramConnectRedirectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerInstagramConnectRedirect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/callback/instagram/connect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerInstagramLogin operation.
     * @callback module:api/DefaultApi~appControllerInstagramLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerInstagramLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerInstagramLogin(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/login/instagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerInstagramLoginRedirect operation.
     * @callback module:api/DefaultApi~appControllerInstagramLoginRedirectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerInstagramLoginRedirectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerInstagramLoginRedirect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/callback/instagram/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerLanding operation.
     * @callback module:api/DefaultApi~appControllerLandingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerLandingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerLanding(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/landing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerLoginWithClientCredentials operation.
     * @callback module:api/DefaultApi~appControllerLoginWithClientCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCredentialsResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ClientCredentialsDto} clientCredentialsDto 
     * @param {module:api/DefaultApi~appControllerLoginWithClientCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCredentialsResponseDto}
     */
    appControllerLoginWithClientCredentials(clientCredentialsDto, callback) {
      let postBody = clientCredentialsDto;
      // verify the required parameter 'clientCredentialsDto' is set
      if (clientCredentialsDto === undefined || clientCredentialsDto === null) {
        throw new Error("Missing the required parameter 'clientCredentialsDto' when calling appControllerLoginWithClientCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientCredentialsResponseDto;
      return this.apiClient.callApi(
        '/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerLogout operation.
     * @callback module:api/DefaultApi~appControllerLogoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerLogout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerPointBadge operation.
     * @callback module:api/DefaultApi~appControllerPointBadgeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerPointBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerPointBadge(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/point-badge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerSse operation.
     * @callback module:api/DefaultApi~appControllerSseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerSseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerSse(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerTwitterConnect operation.
     * @callback module:api/DefaultApi~appControllerTwitterConnectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerTwitterConnectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerTwitterConnect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/connect/twitter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerTwitterConnectRedirect operation.
     * @callback module:api/DefaultApi~appControllerTwitterConnectRedirectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerTwitterConnectRedirectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerTwitterConnectRedirect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/callback/twitter/connect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerTwitterLogin operation.
     * @callback module:api/DefaultApi~appControllerTwitterLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerTwitterLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerTwitterLogin(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/login/twitter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appControllerTwitterLoginRedirect operation.
     * @callback module:api/DefaultApi~appControllerTwitterLoginRedirectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerTwitterLoginRedirectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appControllerTwitterLoginRedirect(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/callback/twitter/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailTemplateControllerCreate operation.
     * @callback module:api/DefaultApi~emailTemplateControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} day 
     * @param {String} type 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~emailTemplateControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emailTemplateControllerCreate(day, type, body, callback) {
      let postBody = body;
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling emailTemplateControllerCreate");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling emailTemplateControllerCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling emailTemplateControllerCreate");
      }

      let pathParams = {
        'day': day
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template/{day}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailTemplateControllerEditByDay operation.
     * @callback module:api/DefaultApi~emailTemplateControllerEditByDayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} day 
     * @param {String} type 
     * @param {module:api/DefaultApi~emailTemplateControllerEditByDayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emailTemplateControllerEditByDay(day, type, callback) {
      let postBody = null;
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling emailTemplateControllerEditByDay");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling emailTemplateControllerEditByDay");
      }

      let pathParams = {
        'day': day
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailTemplateControllerIndex operation.
     * @callback module:api/DefaultApi~emailTemplateControllerIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~emailTemplateControllerIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emailTemplateControllerIndex(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformConnectionControllerCreate operation.
     * @callback module:api/DefaultApi~platformConnectionControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreatePlatformConnectionDto} createPlatformConnectionDto 
     * @param {module:api/DefaultApi~platformConnectionControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    platformConnectionControllerCreate(createPlatformConnectionDto, callback) {
      let postBody = createPlatformConnectionDto;
      // verify the required parameter 'createPlatformConnectionDto' is set
      if (createPlatformConnectionDto === undefined || createPlatformConnectionDto === null) {
        throw new Error("Missing the required parameter 'createPlatformConnectionDto' when calling platformConnectionControllerCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform-connection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformConnectionControllerFindAll operation.
     * @callback module:api/DefaultApi~platformConnectionControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~platformConnectionControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    platformConnectionControllerFindAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform-connection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformConnectionControllerFindOne operation.
     * @callback module:api/DefaultApi~platformConnectionControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~platformConnectionControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    platformConnectionControllerFindOne(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling platformConnectionControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform-connection/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformConnectionControllerRemove operation.
     * @callback module:api/DefaultApi~platformConnectionControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~platformConnectionControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    platformConnectionControllerRemove(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling platformConnectionControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform-connection/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformConnectionControllerUpdate operation.
     * @callback module:api/DefaultApi~platformConnectionControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~platformConnectionControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    platformConnectionControllerUpdate(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling platformConnectionControllerUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling platformConnectionControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform-connection/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointEventControllerFindAll operation.
     * @callback module:api/DefaultApi~pointEventControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~pointEventControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pointEventControllerFindAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/point-event', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointEventControllerFindOne operation.
     * @callback module:api/DefaultApi~pointEventControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~pointEventControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pointEventControllerFindOne(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pointEventControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/point-event/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointEventControllerRemove operation.
     * @callback module:api/DefaultApi~pointEventControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~pointEventControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pointEventControllerRemove(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pointEventControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/point-event/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointEventControllerUpdate operation.
     * @callback module:api/DefaultApi~pointEventControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/UpdatePointEventDto} updatePointEventDto 
     * @param {module:api/DefaultApi~pointEventControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pointEventControllerUpdate(id, updatePointEventDto, callback) {
      let postBody = updatePointEventDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pointEventControllerUpdate");
      }
      // verify the required parameter 'updatePointEventDto' is set
      if (updatePointEventDto === undefined || updatePointEventDto === null) {
        throw new Error("Missing the required parameter 'updatePointEventDto' when calling pointEventControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/point-event/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerCreate operation.
     * @callback module:api/DefaultApi~userControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateUserDto} createUserDto 
     * @param {module:api/DefaultApi~userControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userControllerCreate(createUserDto, callback) {
      let postBody = createUserDto;
      // verify the required parameter 'createUserDto' is set
      if (createUserDto === undefined || createUserDto === null) {
        throw new Error("Missing the required parameter 'createUserDto' when calling userControllerCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerFindOne operation.
     * @callback module:api/DefaultApi~userControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~userControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userControllerFindOne(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerFindOneByEmail operation.
     * @callback module:api/DefaultApi~userControllerFindOneByEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} email 
     * @param {module:api/DefaultApi~userControllerFindOneByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userControllerFindOneByEmail(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling userControllerFindOneByEmail");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/byEmail/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerRemove operation.
     * @callback module:api/DefaultApi~userControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~userControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userControllerRemove(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerUpdate operation.
     * @callback module:api/DefaultApi~userControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~userControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userControllerUpdate(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userControllerUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerUserFromExternalPlatformData operation.
     * @callback module:api/DefaultApi~userControllerUserFromExternalPlatformDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserFromExternalPlatformDataDto} userFromExternalPlatformDataDto 
     * @param {module:api/DefaultApi~userControllerUserFromExternalPlatformDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userControllerUserFromExternalPlatformData(userFromExternalPlatformDataDto, callback) {
      let postBody = userFromExternalPlatformDataDto;
      // verify the required parameter 'userFromExternalPlatformDataDto' is set
      if (userFromExternalPlatformDataDto === undefined || userFromExternalPlatformDataDto === null) {
        throw new Error("Missing the required parameter 'userFromExternalPlatformDataDto' when calling userControllerUserFromExternalPlatformData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/fromExternalPlatformData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
